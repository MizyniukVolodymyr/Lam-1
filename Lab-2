#include <iostream>
#include <iomanip>
#include <sstream>

double CalculationsTask1(int n, int current = 1) {
    if (current > n) {
        return 0.0; // базовий випадок
    }
    // Обчислюємо член ряду: 1 / (2 * current - 1)
    return 1.0 / (2 * current - 1) + CalculationsTask1(n, current + 1);
}

std::string Task1(int num_terms) {
    double sum = CalculationsTask1(num_terms);
    // Множимо на 4, щоб отримати π
    double pi = 4.0 * sum;
    
    std::ostringstream oss;
    oss << std::fixed << std::setprecision(11) << pi; // форматування до 11 знаків після десяткової крапки
    return oss.str(); // повертаємо результат у вигляді рядка
}

int main() {
    int num_terms = 100000; // приклад кількості членів ряду
    std::string pi_value = Task1(num_terms);
    std::cout << "Обчислене значення числа π: " << pi_value << std::endl; /comit
    return 0;
}

#include <iostream>
#include <iomanip>
#include <sstream>

double CalculationsTask2(int n) { /comit
    if (n == 1) {
        return 2.0; // базовий випадок
    }
    // Обчислюємо член ланцюгового дробу
    double a_n = n + 2.0 - 2.0 * (n / 2.0);
    return a_n + 1.0 / CalculationsTask2(n - 1);
}

std::string Task2(int num_terms) {
    double result = CalculationsTask2(num_terms);
    
    std::ostringstream oss;
    oss << std::fixed << std::setprecision(14) << result; // форматування до 14 знаків після десяткової крапки
    return oss.str(); // повертаємо результат у вигляді рядка
}

int main() {
    int num_terms = 10; // приклад кількості членів ланцюгового дробу
    std::string result_value = Task2(num_terms);
    std::cout << "Обчислене значення ланцюгового дробу: " << result_value << std::endl;
    return 0;
}

#include <iostream>
#include <iomanip>
#include <sstream>

double CalculationsTask3(int n, int k = 0) {
    if (n <= 0) {
        return 0.0; // базовий випадок
    }

    // Параметри для розрахунку: 3, 5, 7, 9
    double numerator = (k % 2 == 0) ? 1.0 : -1.0; // чергування знаків /comit
    double denominator = 2.0 * (k / 2 + 1) + 1; // обчислення знаменника

    // Рекурсивний виклик
    return numerator / denominator + CalculationsTask3(n - 1, k + 1);
}

std::string Task3(int num_terms) {
    double result = CalculationsTask3(num_terms);
    
    // Обчислення π
    double pi = 4.0 * result;

    std::ostringstream oss;
    oss << std::fixed << std::setprecision(14) << pi; // форматування до 14 знаків після десяткової крапки
    return oss.str(); // повертаємо результат у вигляді рядка
}

int main() {
    int num_terms = 100000; // приклад кількості членів ряду /comit
    std::string pi_value = Task3(num_terms);
    std::cout << "Обчислене значення числа π: " << pi_value << std::endl;
    return 0;
}
